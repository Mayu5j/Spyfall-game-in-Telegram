# spyfall_bot.py
import asyncio
import random
import time
import logging
from typing import Dict, Any

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.error import Forbidden
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
TOKEN = "123"  # <- –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
MIN_PLAYERS = 4
LOBBY_SECONDS = 60
GAME_MAX_SECONDS = 15 * 60
VOTE_TIMEOUT_SECONDS = 60
SPY_GUESS_TIMEOUT = 30

# 20 –ª–æ–∫–∞—Ü–∏–π (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª)
LOCATIONS = [
    "–ê—ç—Ä–æ–ø–æ—Ä—Ç", "–ö–∞—Ñ–µ", "–ü–ª—è–∂", "–¢–µ–∞—Ç—Ä", "–°—Ç–∞–¥–∏–æ–Ω", "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è",
    "–ö–∞–∑–∏–Ω–æ", "–ü–æ–¥–≤–æ–¥–Ω–∞—è –ª–æ–¥–∫–∞", "–®–∫–æ–ª–∞", "–¶–µ—Ä–∫–æ–≤—å", "–ü–æ–µ–∑–¥", "–ó–æ–æ–ø–∞—Ä–∫",
    "–ë–æ–ª—å–Ω–∏—Ü–∞", "–†–µ—Å—Ç–æ—Ä–∞–Ω", "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫",
    "–ü–∞—Ä–∫", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–û—Ç–µ–ª—å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ñ–∏—Å"
]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ----------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ -----------------
# –õ–æ–±–±–∏ (–æ–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤): chat_id -> {players: {user_id: {name, username}}, task}
lobbies: Dict[int, Dict[str, Any]] = {}

# –ò–≥—Ä—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: chat_id -> game_state
games: Dict[int, Dict[str, Any]] = {}

# –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: chat_id -> vote_state
active_votes: Dict[int, Dict[str, Any]] = {}


# ----------------- –£—Ç–∏–ª–∏—Ç—ã -----------------
async def safe_send_pm(context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str):
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°; –≤–µ—Ä–Ω—É—Ç—å True –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å, False –µ—Å–ª–∏ Forbidden."""
    try:
        await context.bot.send_message(chat_id=user_id, text=text)
        return True
    except Forbidden:
        return False
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PM: %s", e)
        return False


def format_players_list(players: Dict[int, Any]):
    return ", ".join(p["name"] for p in players.values())


# ----------------- –õ–û–ë–ë–ò -----------------
async def cmd_spyfall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ ‚Äî —Å—Ç–∞—Ä—Ç –Ω–∞–±–æ—Ä–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥."""
    chat = update.effective_chat
    user = update.effective_user
    chat_id = chat.id

    # –õ–æ–±–±–∏ –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç?
    if chat_id in games and games[chat_id].get("started"):
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    if chat_id in lobbies:
        await update.message.reply_text("–ù–∞–±–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø–∏—Å–∞—Ç—å –≤ –õ–° —Ç–æ–º—É, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª?
    try:
        test_ok = await safe_send_pm(context, user.id, "–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ä–æ–ª–∏ –≤ –õ–° ‚Äî –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ")
    except Exception:
        test_ok = False

    if not test_ok:
        # —Å–æ–æ–±—â–∞–µ–º –≤ –≥—Ä—É–ø–ø—É, –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –õ–°
        bot_username = context.bot.username or "this_bot"
        await update.message.reply_text(
            f"‚ö†Ô∏è –Ø –Ω–µ –º–æ–≥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –≤ –ª–∏—á–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π: https://t.me/{bot_username} "
            "–∏ –Ω–∞–∂–º–∏ /start, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏ /spyfall —Å–Ω–æ–≤–∞."
        )
        return

    # —Å–æ–∑–¥–∞—ë–º –ª–æ–±–±–∏
    lobbies[chat_id] = {
        "players": {},           # user_id -> {"name": str, "username": str}
        "created_by": user.id,
        "started": False,
        "task": asyncio.create_task(lobby_countdown(chat_id, context)),
    }

    await update.message.reply_text(
        f"üé≤ –ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É Spyfall –Ω–∞—á–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n"
        f"/join <–∏–º—è> ‚Äî —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n"
        f"–ù–∞–±–æ—Ä –∏–¥—ë—Ç {LOBBY_SECONDS} —Å–µ–∫—É–Ω–¥. –ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {MIN_PLAYERS}.\n"
        "–í–∞–∂–Ω–æ: –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º, –∏–Ω–∞—á–µ —Ä–æ–ª–∏ –∏–º –Ω–µ –ø—Ä–∏–¥—É—Ç."
    )


async def lobby_countdown(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–¢–∞–π–º–µ—Ä –ª–æ–±–±–∏ ‚Äî —á–µ—Ä–µ–∑ LOBBY_SECONDS –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤."""
    await asyncio.sleep(LOBBY_SECONDS)
    lobby = lobbies.get(chat_id)
    if not lobby:
        return

    players = lobby["players"]
    if len(players) < MIN_PLAYERS:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å
        for uid, p in players.items():
            try:
                await context.bot.send_message(uid, f"–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ {MIN_PLAYERS}).")
            except Forbidden:
                # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –æ—Ç–∫—Ä—ã–ª –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ —Å–ø–∞–º–∏–º –≤ —á–∞—Ç)
                logger.info("User %s didn't open PM, cannot notify about cancelled game.", uid)
        # —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏ (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—â–∏–π —á–∞—Ç –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        del lobbies[chat_id]
        logger.info("Lobby %s cancelled (not enough players).", chat_id)
        return

    # —Å—Ç–∞—Ä—Ç—É–µ–º –∏–≥—Ä—É
    await start_game_from_lobby(chat_id, context)


# ----------------- JOIN -----------------
async def cmd_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –ª–æ–±–±–∏: /join –ò–º—è"""
    chat = update.effective_chat
    user = update.effective_user
    chat_id = chat.id

    # –Ω–µ—Ç –ª–æ–±–±–∏ -> –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –õ–° (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ), –∏–Ω–∞—á–µ –≤ —á–∞—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—å –õ–°
    if chat_id not in lobbies or lobbies[chat_id].get("started"):
        pm_ok = await safe_send_pm(context, user.id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        if not pm_ok:
            bot_username = context.bot.username or "this_bot"
            await update.message.reply_text(
                f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞. –û—Ç–∫—Ä–æ–π –º–Ω–µ –õ–°: https://t.me/{bot_username} –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
            )
        return

    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è: /join <–∏–º—è>")
        return

    name = " ".join(context.args).strip()
    if not name:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è. /join <–∏–º—è>")
        return

    players = lobbies[chat_id]["players"]
    if user.id in players:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    players[user.id] = {"name": name, "username": user.username}
    await update.message.reply_text(f"‚úÖ {name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(–∞—Å—å) –∫ –ª–æ–±–±–∏! (–í—Å–µ–≥–æ: {len(players)})")


# ----------------- –°–¢–ê–†–¢ –ò–ì–†–´ -----------------
async def start_game_from_lobby(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–Ω–æ—Å–∏–º –ª–æ–±–±–∏ –≤ games –∏ —Ä–∞–∑–¥–∞—ë–º —Ä–æ–ª–∏."""
    lobby = lobbies.get(chat_id)
    if not lobby:
        return

    players = lobby["players"]
    # –∑–∞—â–∏—Ç–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if len(players) < MIN_PLAYERS:
        # –≤–¥—Ä—É–≥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        for uid in players:
            try:
                await context.bot.send_message(uid, f"–ò–≥—Ä–∞ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–Ω—É–∂–Ω–æ {MIN_PLAYERS}).")
            except Forbidden:
                pass
        del lobbies[chat_id]
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    player_ids = list(players.keys())
    location = random.choice(LOCATIONS)
    spy_id = random.choice(player_ids)
    order = player_ids.copy()
    random.shuffle(order)
    # –≤—ã–±—Ä–∞–Ω, –∫—Ç–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç
    current_index = random.randrange(len(order))

    game = {
        "players": players,             # user_id -> {"name", "username"}
        "location": location,
        "spy_id": spy_id,
        "order": order,                 # –æ—á–µ—Ä–µ–¥—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–∞—à–∏–≤–∞—é—â–∏—Ö
        "current_index": current_index,
        "started": True,
        "started_at": time.time(),
        "mistakes": 0,                  # –Ω–µ–≤–µ—Ä–Ω—ã–µ –æ–±–≤–∏–Ω–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π
        "active_vote": None,            # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        "lobby_task": lobbies[chat_id]["task"],
        "timer_task": None,
        "spy_exposed": False,
        "spy_guess_task": None,
    }

    games[chat_id] = game
    # —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
    del lobbies[chat_id]

    # —Ä–∞—Å—Å—ã–ª–∞–µ–º —Ä–æ–ª–∏ –≤ –õ–°
    notified = []
    not_opened = []
    for uid, p in players.items():
        if uid == spy_id:
            # —à–ø–∏–æ–Ω
            text = (
                "ü§´ –¢—ã ‚Äî –®–ü–ò–û–ù!\n\n"
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã—è—Å–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–µ–±—è –∏ —É–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "/guess <–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏>\n\n"
                f"–í–æ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (–ø–æ–¥—Å–∫–∞–∑–∫–∞):\n{', '.join(LOCATIONS)}"
            )
        else:
            text = (
                f"üìç –¢—ã ‚Äî –∂–∏—Ç–µ–ª—å. –õ–æ–∫–∞—Ü–∏—è: <b>{location}</b>\n\n"
                "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –≤—ã—á–∏—Å–ª–∏—Ç—å —à–ø–∏–æ–Ω–∞. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.\n\n"
                f"–í–æ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (–ø–æ–¥—Å–∫–∞–∑–∫–∞):\n{', '.join(LOCATIONS)}"
            )

        ok = await safe_send_pm(context, uid, text)
        if ok:
            notified.append(uid)
        else:
            not_opened.append(uid)

    # –ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é: –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –æ—Ç–∫—Ä—ã–ª –õ–°, —Å–æ–æ–±—â–∞–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç, –∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å
    if not_opened:
        names = ", ".join(games[chat_id]["players"][uid]["name"] for uid in not_opened)
        await context.bot.send_message(chat_id, f"‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∏ —Ä–æ–ª–∏ –∏–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {names}")

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ ‚Äî –∏–≥—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞
    players_list_text = ", ".join(p["name"] for p in players.values())
    starter_id = order[current_index]
    starter_name = players[starter_id]["name"]
    await context.bot.send_message(
        chat_id,
        f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—á–∞—Å—Ç–Ω–∏–∫–∏: {players_list_text}\n"
        f"–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å: <b>{starter_name}</b>.\n\n"
        "–ö–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç —Ç–≤–æ–π —Ö–æ–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏, —É –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å."
    )

    # —Å—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã (15 –º–∏–Ω—É—Ç)
    game["timer_task"] = asyncio.create_task(game_timer(chat_id, context))

    # –ø—Ä–∏—à–ª—ë–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞
    await send_turn_keyboard(chat_id, context)


# ----------------- –û–ß–ï–†–ï–î–¨ –í–û–ü–†–û–°–û–í -----------------
def build_ask_keyboard(chat_id: int):
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É '–∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å' –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã."""
    game = games.get(chat_id)
    if not game:
        return InlineKeyboardMarkup([[]])

    current_id = game["order"][game["current_index"]]
    keyboard = []
    for uid in game["order"]:
        if uid == current_id:
            continue
        name = game["players"][uid]["name"]
        keyboard.append([InlineKeyboardButton(name, callback_data=f"ask:{chat_id}:{uid}")])
    return InlineKeyboardMarkup(keyboard)


async def send_turn_keyboard(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å' –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    game = games.get(chat_id)
    if not game or not game.get("started"):
        return

    current_id = game["order"][game["current_index"]]
    current_name = game["players"][current_id]["name"]

    reply_markup = build_ask_keyboard(chat_id)
    msg = await context.bot.send_message(
        chat_id,
        f"‚û°Ô∏è –•–æ–¥: <b>{current_name}</b>. –í—ã–±–µ—Ä–∏—Ç–µ, —É –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É).",
        reply_markup=reply_markup
    )
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–ø–æ–º–µ—Ç–∏—Ç—å
    game["last_ask_message_id"] = msg.message_id


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ (ask, pass, vote_yes –∏ —Ç.–¥.)
async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫—Ä—É—Ç–∏–ª–∫—É
    data = query.data or ""
    user = query.from_user

    # —Ñ–æ—Ä–º–∞—Ç—ã:
    # ask:<chat_id>:<target_id>
    # pass:<chat_id>:<target_id>
    # vote_yes:<chat_id>:<target_id>
    # cancel_vote:<chat_id>
    parts = data.split(":")

    if parts[0] == "ask" and len(parts) == 3:
        chat_id = int(parts[1]); target_id = int(parts[2])
        await handle_ask_callback(query, context, chat_id, target_id)

    elif parts[0] == "pass" and len(parts) == 3:
        chat_id = int(parts[1]); target_id = int(parts[2])
        await handle_pass_callback(query, context, chat_id, target_id)

    elif parts[0] == "vote_yes" and len(parts) == 3:
        chat_id = int(parts[1]); target_id = int(parts[2])
        await handle_vote_yes(query, context, chat_id, target_id)

    elif parts[0] == "cancel_vote" and len(parts) == 2:
        chat_id = int(parts[1])
        await handle_cancel_vote(query, context, chat_id)

    else:
        await query.edit_message_text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.")


async def handle_ask_callback(query, context, chat_id: int, target_id: int):
    """–ö–Ω–æ–ø–∫–∞: —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª, —É –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏—Ç—å."""
    user = query.from_user
    game = games.get(chat_id)
    if not game or not game.get("started"):
        await query.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    current_id = game["order"][game["current_index"]]
    if user.id != current_id:
        await query.answer("–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å.", show_alert=True)
        return

    if target_id not in game["players"]:
        await query.answer("–ò–≥—Ä–æ–∫ –Ω–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
        return

    asker_name = game["players"][current_id]["name"]
    target_name = game["players"][target_id]["name"]

    # –°–æ–æ–±—â–∞–µ–º –≤ —á–∞—Ç, –∫—Ç–æ –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏–ª
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" ‚Äî –µ—ë –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏–ª–∏ (—á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –æ—á–µ—Ä–µ–¥—å)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ûú", callback_data=f"pass:{chat_id}:{target_id}")]])
    await context.bot.send_message(chat_id, f"üó£ <b>{asker_name}</b> —Å–ø—Ä–æ—Å–∏–ª(–∞) —É <b>{target_name}</b>. {target_name}, –æ—Ç–≤–µ—á–∞–π!", reply_markup=kb)


async def handle_pass_callback(query, context, chat_id: int, target_id: int):
    """–ö–Ω–æ–ø–∫–∞ '–î–∞–ª—å—à–µ' ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ–¥ —Ç–æ–º—É, —É –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏–ª–∏."""
    user = query.from_user
    game = games.get(chat_id)
    if not game or not game.get("started"):
        await query.answer("–ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    if user.id != target_id:
        await query.answer("–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫–æ–≥–æ —Å–ø—Ä–æ—Å–∏–ª–∏, –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É.", show_alert=True)
        return

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é target_id
    try:
        new_index = game["order"].index(target_id)
    except ValueError:
        await query.answer("–ò–≥—Ä–æ–∫ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.", show_alert=True)
        return

    game["current_index"] = new_index
    await context.bot.send_message(chat_id, f"üîÅ –¢–µ–ø–µ—Ä—å —Ö–æ–¥ —É <b>{game['players'][target_id]['name']}</b>.")
    # –æ—Ç–ø—Ä–∞–≤–∏–º –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
    await send_turn_keyboard(chat_id, context)


# ----------------- –ì–û–õ–û–°–û–í–ê–ù–ò–ï -----------------
async def cmd_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: /vote (reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞) –∏–ª–∏ /vote @username"""
    chat = update.effective_chat
    user = update.effective_user
    chat_id = chat.id

    game = games.get(chat_id)
    if not game or not game.get("started"):
        await update.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    target_id = None
    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
    elif context.args:
        arg = context.args[0]
        if arg.startswith("@"):
            uname = arg[1:].lower()
            # –∏—Å–∫–∞—Ç—å –ø–æ username —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for uid, p in game["players"].items():
                if p.get("username") and p["username"].lower() == uname:
                    target_id = uid
                    break
        else:
            # –≤–æ–∑–º–æ–∂–Ω–æ user_id
            try:
                target_id_candidate = int(arg)
                if target_id_candidate in game["players"]:
                    target_id = target_id_candidate
            except:
                pass

    if target_id is None or target_id not in game["players"]:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /vote, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏–ª–∏ /vote @username")
        return

    if chat_id in active_votes:
        await update.message.reply_text("–£–∂–µ –∏–¥—ë—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    # —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    vote = {
        "target": target_id,
        "initiator": user.id,
        "votes": set(),   # user_ids, –≥–æ–ª–æ—Å—É—é—â–∏–µ "–∑–∞"
        "message_id": None,
        "end_task": None,
    }
    active_votes[chat_id] = vote

    target_name = game["players"][target_id]["name"]
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –∫–Ω–æ–ø–∫–∞ "–Ø –∑–∞"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–Ø –∑–∞ ‚úÖ", callback_data=f"vote_yes:{chat_id}:{target_id}")]])
    msg = await context.bot.send_message(chat_id, f"üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —à–ø–∏–æ–Ω–∞: <b>{target_name}</b>\n–ù–∞–∂–º–∏—Ç–µ ¬´–Ø –∑–∞¬ª, –µ—Å–ª–∏ –≤—ã –∑–∞ –æ–±–≤–∏–Ω–µ–Ω–∏–µ.", reply_markup=kb)
    vote["message_id"] = msg.message_id

    # –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–∞—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    vote["end_task"] = asyncio.create_task(vote_timeout(chat_id, context))
    await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ.")


async def handle_vote_yes(query, context, chat_id: int, target_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ '–Ø –∑–∞' –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é."""
    user = query.from_user
    gv = active_votes.get(chat_id)
    game = games.get(chat_id)
    if not gv or not game:
        await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    if gv["target"] != target_id:
        await query.answer("–≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–µ –ø—Ä–æ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞.", show_alert=True)
        return

    if user.id not in game["players"]:
        await query.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.", show_alert=True)
        return

    gv["votes"].add(user.id)
    # –æ–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    count = len(gv["votes"]); total = len(game["players"])
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=gv["message_id"],
            text=f"üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞: <b>{game['players'][target_id]['name']}</b>\n"
                 f"–ì–æ–ª–æ—Å–æ–≤ –∑–∞: {count}/{total}\n(–ù—É–∂–Ω–æ >50% —á—Ç–æ–±—ã –æ–±–≤–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ)",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–Ø –∑–∞ ‚úÖ", callback_data=f"vote_yes:{chat_id}:{target_id}")]])
        )
    except Exception:
        pass

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞–±—Ä–∞–ª–∏ –ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ
    if count > total / 2:
        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –æ–±–≤–∏–Ω–µ–Ω–∏–µ
        # –æ—Ç–º–µ–Ω–∏–º —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        task = gv.get("end_task")
        if task and not task.done():
            task.cancel()
        # –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–≤–∏–Ω–µ–Ω–∏—è
        await finalize_vote(chat_id, context, target_id)
    else:
        await query.answer(f"–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω ({count}/{total}).")


async def vote_timeout(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∑–∞ VOTE_TIMEOUT_SECONDS ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å –Ω–∏—á—å–µ–π."""
    try:
        await asyncio.sleep(VOTE_TIMEOUT_SECONDS)
        gv = active_votes.get(chat_id)
        game = games.get(chat_id)
        if not gv or not game:
            return
        # –ø–æ —Ç–∞–π–º–∞—É—Ç—É ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è (–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ)
        await context.bot.send_message(chat_id, "‚è± –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ ‚Äî –æ–±–≤–∏–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ.")
        del active_votes[chat_id]
    except asyncio.CancelledError:
        return


async def finalize_vote(chat_id: int, context: ContextTypes.DEFAULT_TYPE, target_id: int):
    """–û–±–≤–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ (–º–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞)."""
    gv = active_votes.get(chat_id)
    game = games.get(chat_id)
    if not gv or not game:
        return

    # –æ—á–∏—Å—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    try:
        del active_votes[chat_id]
    except KeyError:
        pass

    target_name = game["players"][target_id]["name"]
    spy_id = game["spy_id"]
    if target_id == spy_id:
        # –∂–∏—Ç–µ–ª–∏ –≤—ã—á–∏—Å–ª–∏–ª–∏ —à–ø–∏–æ–Ω–∞ ‚Äî —à–ø–∏–æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —à–∞–Ω—Å —É–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é
        game["spy_exposed"] = True
        await context.bot.send_message(chat_id, f"üîî –ñ–∏—Ç–µ–ª–∏ –≤—ã—á–∏—Å–ª–∏–ª–∏ —à–ø–∏–æ–Ω–∞: <b>{target_name}</b>.\n"
                                                "–®–ø–∏–æ–Ω—É –¥–∞—ë—Ç—Å—è —à–∞–Ω—Å —É–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é. –®–ø–∏–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
                                                "/guess <–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏>\n"
                                                f"–£ —Ç–µ–±—è {SPY_GUESS_TIMEOUT} —Å–µ–∫—É–Ω–¥.")
        # —Å—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —à–ø–∏–æ–Ω–∞
        game["spy_guess_task"] = asyncio.create_task(spy_guess_timeout(chat_id, context))
    else:
        # –æ—à–∏–±–æ—á–Ω–æ–µ –æ–±–≤–∏–Ω–µ–Ω–∏–µ
        game["mistakes"] += 1
        await context.bot.send_message(chat_id, f"‚ùå –≠—Ç–æ –±—ã–ª –Ω–µ —à–ø–∏–æ–Ω. –û—à–∏–±–æ–∫ —É –∂–∏—Ç–µ–ª–µ–π: {game['mistakes']}/2.")
        if game["mistakes"] >= 2:
            # —à–ø–∏–æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç
            await end_game(chat_id, context, winner="spy", reason="–ñ–∏—Ç–µ–ª–∏ –¥–≤–∞–∂–¥—ã –æ—à–∏–±–ª–∏—Å—å —Å –æ–±–≤–∏–Ω–µ–Ω–∏–µ–º.")
        else:
            # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É; –Ω–µ –º–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
            await context.bot.send_message(chat_id, "–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. –í–µ—Ä–Ω—ë–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")
            await send_turn_keyboard(chat_id, context)


async def handle_cancel_vote(query, context, chat_id: int):
    """(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ—Ç–º–µ–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."""
    if chat_id in active_votes:
        try:
            gv = active_votes[chat_id]
            if gv.get("end_task") and not gv["end_task"].done():
                gv["end_task"].cancel()
        except Exception:
            pass
        del active_votes[chat_id]
    await query.message.edit_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# ----------------- –£–ì–ê–î–´–í–ê–ù–ò–ï (spy) -----------------
async def cmd_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /guess <–ª–æ–∫–∞—Ü–∏—è> ‚Äî —à–ø–∏–æ–Ω –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é."""
    chat = update.effective_chat
    user = update.effective_user
    chat_id = chat.id if chat else None
    text_args = context.args

    # –û–ø—Ä–µ–¥–µ–ª–∏–º, –≤ –∫–∞–∫–æ–π –∏–≥—Ä–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç (–æ–Ω –º–æ–≥ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –õ–° –∏–ª–∏ –≤ –æ–±—â–µ–º —á–∞—Ç–µ)
    # –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ games –∏ –Ω–∞–π–¥—ë–º —Ç—É, –≥–¥–µ user –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ started==True
    user_game_chat = None
    for cid, g in games.items():
        if g.get("started") and user.id in g["players"]:
            user_game_chat = cid
            break

    if user_game_chat is None:
        await update.message.reply_text("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ.")
        return

    game = games[user_game_chat]
    if user.id != game["spy_id"]:
        await update.message.reply_text("–£–≥–∞–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —à–ø–∏–æ–Ω.")
        return

    if not text_args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /guess <–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏>")
        return

    guess = " ".join(text_args).strip().lower()
    real = game["location"].strip().lower()

    if guess == real:
        await context.bot.send_message(user_game_chat, f"üèÜ –®–ø–∏–æ–Ω <b>{game['players'][user.id]['name']}</b> —É–≥–∞–¥–∞–ª –ª–æ–∫–∞—Ü–∏—é ‚Äî <b>{game['location']}</b>. –®–ø–∏–æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç!")
        await end_game(user_game_chat, context, winner="spy", reason="–®–ø–∏–æ–Ω —É–≥–∞–¥–∞–ª –ª–æ–∫–∞—Ü–∏—é.")
    else:
        await context.bot.send_message(user_game_chat, f"‚úÖ –®–ø–∏–æ–Ω –æ—à–∏–±—Å—è —Å —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ–º (–Ω–∞–∑–≤–∞–ª: {guess}). –ü–æ–±–µ–¥–∏–ª–∏ –∂–∏—Ç–µ–ª–∏!")
        await end_game(user_game_chat, context, winner="residents", reason="–®–ø–∏–æ–Ω –æ—à–∏–±—Å—è –ø—Ä–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏.")


async def spy_guess_timeout(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–®–ø–∏–æ–Ω—É –¥–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è; –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç ‚Äî –∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç."""
    try:
        await asyncio.sleep(SPY_GUESS_TIMEOUT)
        game = games.get(chat_id)
        if not game:
            return
        if game.get("spy_exposed") and game.get("started"):
            await context.bot.send_message(chat_id, "‚è± –í—Ä–µ–º—è —à–ø–∏–æ–Ω–∞ –≤—ã—à–ª–æ ‚Äî –æ–Ω –Ω–µ —É—Å–ø–µ–ª –Ω–∞–∑–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü–æ–±–µ–¥–∏–ª–∏ –∂–∏—Ç–µ–ª–∏!")
            await end_game(chat_id, context, winner="residents", reason="–®–ø–∏–æ–Ω –Ω–µ —É—Å–ø–µ–ª –Ω–∞–∑–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è.")
    except asyncio.CancelledError:
        return


# ----------------- –¢–ê–ô–ú–ï–† –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï -----------------
async def game_timer(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–¢–∞–π–º–µ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã (15 –º–∏–Ω—É—Ç)."""
    try:
        await asyncio.sleep(GAME_MAX_SECONDS)
        game = games.get(chat_id)
        if not game or not game.get("started"):
            return
        await context.bot.send_message(chat_id, "‚è≥ –í—Ä–µ–º—è –∏–≥—Ä—ã –≤—ã—à–ª–æ ‚Äî –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç (—à–ø–∏–æ–Ω –Ω–µ —É—Å–ø–µ–ª).")
        await end_game(chat_id, context, winner="residents", reason="–í—Ä–µ–º—è –≤—ã—à–ª–æ.")
    except asyncio.CancelledError:
        return


async def end_game(chat_id: int, context: ContextTypes.DEFAULT_TYPE, winner: str, reason: str):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É: –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏, —Å–æ–æ–±—â–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å —à–ø–∏–æ–Ω–∞ –∏ –ª–æ–∫–∞—Ü–∏—é."""
    game = games.get(chat_id)
    if not game:
        return

    spy_id = game["spy_id"]
    spy_name = game["players"][spy_id]["name"]
    location = game["location"]

    if winner == "spy":
        result_text = f"üèÜ –ü–æ–±–µ–¥–∏–ª —à–ø–∏–æ–Ω: <b>{spy_name}</b>.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    else:
        result_text = f"üèÜ –ü–æ–±–µ–¥–∏–ª–∏ –∂–∏—Ç–µ–ª–∏!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–®–ø–∏–æ–Ω: <b>{spy_name}</b>."

    result_text += f"\n\n–õ–æ–∫–∞—Ü–∏—è: <b>{location}</b>."

    await context.bot.send_message(chat_id, result_text)

    # –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏
    try:
        if game.get("timer_task") and not game["timer_task"].done():
            game["timer_task"].cancel()
    except Exception:
        pass
    try:
        if game.get("spy_guess_task") and not game["spy_guess_task"].done():
            game["spy_guess_task"].cancel()
    except Exception:
        pass

    # —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    try:
        del games[chat_id]
    except KeyError:
        pass


# ----------------- –ü–†–û–ß–ò–ï –ö–û–ú–ê–ù–î–´ -----------------
async def cmd_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/players ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    chat = update.effective_chat
    game = games.get(chat.id)
    if not game:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    text = "–ò–≥—Ä–æ–∫–∏:\n" + "\n".join(f"- {p['name']}" for p in game["players"].values())
    await update.message.reply_text(text)


async def cmd_leave(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/leave ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏ (–¥–æ —Å—Ç–∞—Ä—Ç–∞)."""
    chat = update.effective_chat
    user = update.effective_user
    chat_id = chat.id

    if chat_id in lobbies and user.id in lobbies[chat_id]["players"]:
        del lobbies[chat_id]["players"][user.id]
        await update.message.reply_text("–¢—ã –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏.")
        return
    await update.message.reply_text("–¢—ã –Ω–µ –≤ –ª–æ–±–±–∏ –∏–ª–∏ –æ–Ω–æ —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–æ.")


# ----------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -----------------
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("spyfall", cmd_spyfall))
    app.add_handler(CommandHandler("join", cmd_join))
    app.add_handler(CommandHandler("vote", cmd_vote))
    app.add_handler(CommandHandler("guess", cmd_guess))
    app.add_handler(CommandHandler("players", cmd_players))
    app.add_handler(CommandHandler("leave", cmd_leave))

    # –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback'–æ–≤ (ask/pass/vote_yes ...)
    app.add_handler(CallbackQueryHandler(callback_router))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
